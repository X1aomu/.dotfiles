if !exists("g:os")
  if has("win64") || has("win32") || has("win16")
    let g:os = "Windows"
  else
    let g:os = substitute(system('uname'), '\n', '', '')
  endif
endif

let mapleader = "\<Space>"

"===== Section Start =====
" vim-plug               |
"=========================

if has("unix")
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
endif

call plug#begin('~/.vim/plugged')
" colorthemes
let g:solarized_extra_hi_groups = 1
let g:solarized_termtrans = 1
Plug 'lifepillar/vim-solarized8'
let g:onedark_terminal_italics = 1
Plug 'joshdick/onedark.vim'
let g:dracula_colorterm = 0
let g:dracula_italic = 1
Plug 'dracula/vim', { 'as': 'dracula' }
" editing
Plug 'editorconfig/editorconfig-vim'
let g:AutoPairsFlyMode = 1
Plug 'jiangmiao/auto-pairs', {'for': ['rust', 'c', 'cpp', 'python']}
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'
" look

"let g:lightline = { 'colorscheme': 'onedark', }
"Plug 'itchyny/lightline.vim'

let g:rainbow_active = 1
Plug 'luochen1990/rainbow'

let g:airline#extensions#ale#enabled = 1
Plug 'vim-airline/vim-airline'
let g:airline_theme = 'onedark'
Plug 'vim-airline/vim-airline-themes'

" lang
Plug 'sheerun/vim-polyglot'
"Plug 'cespare/vim-toml'
"Plug 'rust-lang/rust.vim'
Plug 'majutsushi/tagbar'

"Plug 'natebosch/vim-lsc'
"let g:lsc_server_commands = {'rust': 'rls'}
"let g:lsc_auto_map = v:true
"autocmd CompleteDone * silent! pclose

let g:ale_completion_enabled = 1
let g:ale_sign_column_always = 1
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_set_balloons = 1
set ttymouse=xterm2
Plug 'dense-analysis/ale'
let g:ale_linters = {'rust': ['rust-analyzer', 'rls']}
let g:ale_fixers = {
  \   '*': ['remove_trailing_lines', 'trim_whitespace'],
  \   'rust': ['rustfmt'],
  \}
let g:ale_fix_on_save = 1

" other
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-obsession'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
call plug#end()

"====== Section End ======
" vim-plug               |
"=========================

" mappings for plugins
noremap <leader>tt :TagbarToggle<CR>

" own mappings
inoremap jk <ESC>
nnoremap <BS> :nohl<CR>

command W :w !sudo tee % >/dev/null

set timeout
set ttimeout
set timeoutlen=1000
set ttimeoutlen=10

" first of all
set nocompatible

" look
set ruler
set number
set showcmd
set laststatus=2
"set cursorline

" searching
set hlsearch
set ignorecase smartcase
set incsearch
" navigation
set scrolloff=1
set nowrap
"set sidescroll=5
set backspace=indent,eol,start " allow backspacing over everything
set whichwrap=b,s,<,>,[,]

" editing
set shiftround
set autoindent
set smartindent
set cindent
set smarttab

" misc
set history=1000
set modeline
set modelines=3
if g:os == "Linux"
  set clipboard=unnamed,exclude:cons\|linux
endif

" Enable true color
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

" color scheme
syntax on
set background=dark
colorscheme onedark

if has('mouse')
  set mouse=a
endif

set nobackup
set nowritebackup
"set noundofile

" The matchit plugin makes the % command work better, but it is not backwards
" compatible.
" The ! means the package won't be loaded right away but when plugins are
" loaded during initialization.
if has('syntax') && has('eval')
  packadd! matchit
endif

" Put these in an autocmd group, so that we can delete them easily.
augroup vimrcEx
  au!
  " When editing a file, always jump to the last known cursor position.
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
augroup END " vimrcEx

if has('langmap') && exists('+langnoremap')
  " Prevent that the langmap option applies to characters that result from a
  " mapping.  If unset (default), this may break plugins (but it's backward
  " compatible).
  set langnoremap
endif

map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

set fileencodings=usc-bom,utf-8,gb18030,chinese,taiwan,japan,korea,utf-16le,utf-16,default,latin1
" vim: set et sts=2 sw=2 :
