if !exists("g:os")
  if has("win64") || has("win32") || has("win16")
    let g:os = "Windows"
  else
    let g:os = substitute(system('uname'), '\n', '', '')
  endif
endif

let mapleader = "\<Space>"

"===== Section Start =====
" vim-plug               |
"=========================

if has("unix")
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
endif

call plug#begin('~/.vim/plugged')
" colorthemes
Plug 'lifepillar/vim-solarized8'
Plug 'joshdick/onedark.vim'
Plug 'dracula/vim', { 'as': 'dracula' }
" editing
Plug 'editorconfig/editorconfig-vim'
Plug 'jiangmiao/auto-pairs', {'for': ['rust']}
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'
" look
Plug 'itchyny/lightline.vim'
Plug 'luochen1990/rainbow'
let g:rainbow_active = 1
" lang
Plug 'cespare/vim-toml'
Plug 'rust-lang/rust.vim'
Plug 'majutsushi/tagbar'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
" other
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-obsession'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
call plug#end()

"====== Section End ======
" vim-plug               |
"=========================

" mappings for plugins
noremap <leader>tt :TagbarToggle<CR>
noremap <leader>lrr :LspRename<CR>
noremap <leader>lca :LspCodeAction<CR>
noremap <leader>ld  :LspDeclaration<CR>
noremap <leader>lD  :LspDefinition<CR>
noremap <leader>lf  :LspDocumentFold<CR>
noremap <leader>lF  :LspDocumentFormat<CR>
xnoremap <leader>lF :LspDocumentRangeFormat<CR>
noremap <leader>lsd :LspDocumentSymbol<CR>
noremap <leader>lsw :LspWorkspaceSymbol<CR>
noremap <leader>li  :LspImplementation<CR>
noremap <leader>lr  :LspReferences<CR>
noremap <CR> :ccl<CR><CR> " auto close quickfix window

" own mappings
inoremap jk <ESC>
nnoremap <BS> :nohl<CR>

command W :w !sudo tee % >/dev/null

set timeout
set ttimeout
set timeoutlen=1000
set ttimeoutlen=10

" first of all
set nocompatible

" look
set ruler
set number
set showcmd
set laststatus=2

" searching
set hlsearch
set ignorecase smartcase
set incsearch
" navigation
set scrolloff=1
set nowrap
set sidescroll=5
set backspace=indent,eol,start " allow backspacing over everything
set whichwrap=b,s,<,>,[,]

" editing
set shiftround
set autoindent
set smartindent
set cindent
set smarttab

" misc
set history=1000
set modeline
set modelines=3
if g:os == "Linux"
  set clipboard=unnamed,exclude:cons\|linux
endif

" Enable true color
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

" color scheme
syntax on
set background=light
let g:solarized_extra_hi_groups = 1
let g:solarized_termtrans = 1
let g:dracula_colorterm = 0
let g:dracula_italic = 1
colorscheme solarized8
let g:lightline = {
  \ 'colorscheme': 'solarized',
  \ }


if has('mouse')
  set mouse=a
endif

set nobackup
set nowritebackup
set noundofile

" The matchit plugin makes the % command work better, but it is not backwards
" compatible.
" The ! means the package won't be loaded right away but when plugins are
" loaded during initialization.
if has('syntax') && has('eval')
  packadd! matchit
endif

" Put these in an autocmd group, so that we can delete them easily.
augroup vimrcEx
  au!
  " When editing a file, always jump to the last known cursor position.
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
augroup END " vimrcEx

if has('langmap') && exists('+langnoremap')
  " Prevent that the langmap option applies to characters that result from a
  " mapping.  If unset (default), this may break plugins (but it's backward
  " compatible).
  set langnoremap
endif

"===== vim-lsp =====
if executable('rls')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'rls',
    \ 'cmd': {server_info->['rustup', 'run', 'stable', 'rls']},
    \ 'workspace_config': {'rust': {'all_features': 'true', 'racer_completion': 'true', 'clippy_preference': 'on'}},
    \ 'whitelist': ['rust'],
    \ })
endif
if executable('clangd')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'clangd',
    \ 'cmd': {server_info->['clangd', '-background-index']},
    \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
    \ })
endif
if executable('pyls')
  " pip install python-language-server
  au User lsp_setup call lsp#register_server({
    \ 'name': 'pyls',
    \ 'cmd': {server_info->['pyls']},
    \ 'whitelist': ['python'],
    \ })
endif
let g:lsp_signs_enabled = 1 " enable signs
let g:lsp_signs_error = {'text': '✗'}
let g:lsp_signs_warning = {'text': '‼'} " icons require GUI
let g:lsp_signs_hint = {'text': '!'} " icons require GUI
let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode
let g:lsp_highlight_references_enabled = 1
"set foldmethod=expr
"  \ foldexpr=lsp#ui#vim#folding#foldexpr()
"  \ foldtext=lsp#ui#vim#folding#foldtext()
highlight lspReference ctermbg=Yellow guibg=Yellow
"===== vim-lsp =====

"===== asyncomplete =====
" tap completion
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
"inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"
" enable preview window
set completeopt+=preview
" auto close preview window when completion is done
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
"===== asyncomplete =====

set fileencodings=usc-bom,utf-8,cp936,gb18030,big5,latin1,default
" vim: set et sts=2 sw=2 :
